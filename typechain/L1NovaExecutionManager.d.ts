/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface L1NovaExecutionManagerInterface extends ethers.utils.Interface {
  functions: {
    "CROSS_DOMAIN_MESSENGER()": FunctionFragment;
    "DEFAULT_EXECHASH()": FunctionFragment;
    "EXEC_COMPLETED_MESSAGE_GAS_LIMIT()": FunctionFragment;
    "HARD_REVERT_HASH()": FunctionFragment;
    "HARD_REVERT_TEXT()": FunctionFragment;
    "L2_NOVA_REGISTRY_ADDRESS()": FunctionFragment;
    "authority()": FunctionFragment;
    "calldataByteGasEstimate()": FunctionFragment;
    "currentExecHash()": FunctionFragment;
    "currentRelayer()": FunctionFragment;
    "currentlyExecutingStrategy()": FunctionFragment;
    "exec(uint256,address,bytes,uint256,address,uint256)": FunctionFragment;
    "getStrategyRiskLevel(address)": FunctionFragment;
    "hardRevert()": FunctionFragment;
    "missingGasEstimate()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerSelfAsStrategy(uint8)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setCalldataByteGasEstimate(uint16)": FunctionFragment;
    "setMissingGasEstimate(uint120)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setStrategyCallGasBuffer(uint120)": FunctionFragment;
    "strategyCallGasBuffer()": FunctionFragment;
    "transferFromRelayer(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CROSS_DOMAIN_MESSENGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_EXECHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXEC_COMPLETED_MESSAGE_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HARD_REVERT_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HARD_REVERT_TEXT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L2_NOVA_REGISTRY_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calldataByteGasEstimate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentExecHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentlyExecutingStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyRiskLevel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hardRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "missingGasEstimate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerSelfAsStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCalldataByteGasEstimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMissingGasEstimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStrategyCallGasBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyCallGasBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromRelayer",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CROSS_DOMAIN_MESSENGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_EXECHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXEC_COMPLETED_MESSAGE_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HARD_REVERT_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HARD_REVERT_TEXT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L2_NOVA_REGISTRY_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calldataByteGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentExecHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentlyExecutingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyRiskLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hardRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "missingGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSelfAsStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCalldataByteGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMissingGasEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyCallGasBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyCallGasBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromRelayer",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "CalldataByeGasEstimateUpdated(uint256)": EventFragment;
    "Exec(bytes32,address,bool,uint256)": EventFragment;
    "MissingGasEstimateUpdated(uint256)": EventFragment;
    "OwnerUpdated(address)": EventFragment;
    "StrategyCallGasBufferUpdated(uint256)": EventFragment;
    "StrategyRegistered(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CalldataByeGasEstimateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exec"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MissingGasEstimateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyCallGasBufferUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRegistered"): EventFragment;
}

export class L1NovaExecutionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L1NovaExecutionManagerInterface;

  functions: {
    CROSS_DOMAIN_MESSENGER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_EXECHASH(overrides?: CallOverrides): Promise<[string]>;

    EXEC_COMPLETED_MESSAGE_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<[number]>;

    HARD_REVERT_HASH(overrides?: CallOverrides): Promise<[string]>;

    HARD_REVERT_TEXT(overrides?: CallOverrides): Promise<[string]>;

    L2_NOVA_REGISTRY_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    calldataByteGasEstimate(overrides?: CallOverrides): Promise<[number]>;

    currentExecHash(overrides?: CallOverrides): Promise<[string]>;

    currentRelayer(overrides?: CallOverrides): Promise<[string]>;

    currentlyExecutingStrategy(overrides?: CallOverrides): Promise<[string]>;

    exec(
      nonce: BigNumberish,
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      l2Recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStrategyRiskLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hardRevert(overrides?: CallOverrides): Promise<[void]>;

    missingGasEstimate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerSelfAsStrategy(
      strategyRiskLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCalldataByteGasEstimate(
      newCalldataByteGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMissingGasEstimate(
      newMissingGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyCallGasBuffer(
      newStrategyCallGasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyCallGasBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CROSS_DOMAIN_MESSENGER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_EXECHASH(overrides?: CallOverrides): Promise<string>;

  EXEC_COMPLETED_MESSAGE_GAS_LIMIT(overrides?: CallOverrides): Promise<number>;

  HARD_REVERT_HASH(overrides?: CallOverrides): Promise<string>;

  HARD_REVERT_TEXT(overrides?: CallOverrides): Promise<string>;

  L2_NOVA_REGISTRY_ADDRESS(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  calldataByteGasEstimate(overrides?: CallOverrides): Promise<number>;

  currentExecHash(overrides?: CallOverrides): Promise<string>;

  currentRelayer(overrides?: CallOverrides): Promise<string>;

  currentlyExecutingStrategy(overrides?: CallOverrides): Promise<string>;

  exec(
    nonce: BigNumberish,
    strategy: string,
    l1Calldata: BytesLike,
    gasLimit: BigNumberish,
    l2Recipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStrategyRiskLevel(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  hardRevert(overrides?: CallOverrides): Promise<void>;

  missingGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerSelfAsStrategy(
    strategyRiskLevel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCalldataByteGasEstimate(
    newCalldataByteGasEstimate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMissingGasEstimate(
    newMissingGasEstimate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyCallGasBuffer(
    newStrategyCallGasBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyCallGasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  transferFromRelayer(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CROSS_DOMAIN_MESSENGER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_EXECHASH(overrides?: CallOverrides): Promise<string>;

    EXEC_COMPLETED_MESSAGE_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<number>;

    HARD_REVERT_HASH(overrides?: CallOverrides): Promise<string>;

    HARD_REVERT_TEXT(overrides?: CallOverrides): Promise<string>;

    L2_NOVA_REGISTRY_ADDRESS(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    calldataByteGasEstimate(overrides?: CallOverrides): Promise<number>;

    currentExecHash(overrides?: CallOverrides): Promise<string>;

    currentRelayer(overrides?: CallOverrides): Promise<string>;

    currentlyExecutingStrategy(overrides?: CallOverrides): Promise<string>;

    exec(
      nonce: BigNumberish,
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      l2Recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getStrategyRiskLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    hardRevert(overrides?: CallOverrides): Promise<void>;

    missingGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerSelfAsStrategy(
      strategyRiskLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCalldataByteGasEstimate(
      newCalldataByteGasEstimate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMissingGasEstimate(
      newMissingGasEstimate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setStrategyCallGasBuffer(
      newStrategyCallGasBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyCallGasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    CalldataByeGasEstimateUpdated(
      newCalldataByteGasEstimate?: null
    ): TypedEventFilter<[BigNumber], { newCalldataByteGasEstimate: BigNumber }>;

    Exec(
      execHash?: BytesLike | null,
      relayer?: null,
      reverted?: null,
      gasUsed?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        execHash: string;
        relayer: string;
        reverted: boolean;
        gasUsed: BigNumber;
      }
    >;

    MissingGasEstimateUpdated(
      newMissingGasEstimate?: null
    ): TypedEventFilter<[BigNumber], { newMissingGasEstimate: BigNumber }>;

    OwnerUpdated(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    StrategyCallGasBufferUpdated(
      newStrategyCallGasBuffer?: null
    ): TypedEventFilter<[BigNumber], { newStrategyCallGasBuffer: BigNumber }>;

    StrategyRegistered(
      strategyRiskLevel?: null
    ): TypedEventFilter<[number], { strategyRiskLevel: number }>;
  };

  estimateGas: {
    CROSS_DOMAIN_MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_EXECHASH(overrides?: CallOverrides): Promise<BigNumber>;

    EXEC_COMPLETED_MESSAGE_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    HARD_REVERT_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    HARD_REVERT_TEXT(overrides?: CallOverrides): Promise<BigNumber>;

    L2_NOVA_REGISTRY_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    calldataByteGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;

    currentExecHash(overrides?: CallOverrides): Promise<BigNumber>;

    currentRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    currentlyExecutingStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    exec(
      nonce: BigNumberish,
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      l2Recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStrategyRiskLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hardRevert(overrides?: CallOverrides): Promise<BigNumber>;

    missingGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerSelfAsStrategy(
      strategyRiskLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCalldataByteGasEstimate(
      newCalldataByteGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMissingGasEstimate(
      newMissingGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyCallGasBuffer(
      newStrategyCallGasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyCallGasBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CROSS_DOMAIN_MESSENGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_EXECHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXEC_COMPLETED_MESSAGE_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HARD_REVERT_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HARD_REVERT_TEXT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L2_NOVA_REGISTRY_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calldataByteGasEstimate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentExecHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentlyExecutingStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exec(
      nonce: BigNumberish,
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      l2Recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStrategyRiskLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hardRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    missingGasEstimate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSelfAsStrategy(
      strategyRiskLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCalldataByteGasEstimate(
      newCalldataByteGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMissingGasEstimate(
      newMissingGasEstimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyCallGasBuffer(
      newStrategyCallGasBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyCallGasBuffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
