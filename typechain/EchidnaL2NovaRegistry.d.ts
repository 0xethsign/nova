/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EchidnaL2NovaRegistryInterface extends ethers.utils.Interface {
  functions: {
    "requestExec_and_unlock_and_withdraw_tokens_should_work(address,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "should_always_be_able_connect_execution_manager(address)": FunctionFragment;
    "speeding_up_a_request_multiple_times_should_fail(address,bytes,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "requestExec_and_unlock_and_withdraw_tokens_should_work",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "should_always_be_able_connect_execution_manager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "speeding_up_a_request_multiple_times_should_fail",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "requestExec_and_unlock_and_withdraw_tokens_should_work",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "should_always_be_able_connect_execution_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speeding_up_a_request_multiple_times_should_fail",
    data: BytesLike
  ): Result;

  events: {};
}

export class EchidnaL2NovaRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EchidnaL2NovaRegistryInterface;

  functions: {
    requestExec_and_unlock_and_withdraw_tokens_should_work(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      unlockDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    should_always_be_able_connect_execution_manager(
      newExecutionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    speeding_up_a_request_multiple_times_should_fail(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      gasDelta1: BigNumberish,
      gasDelta2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  requestExec_and_unlock_and_withdraw_tokens_should_work(
    strategy: string,
    l1Calldata: BytesLike,
    gasLimit: BigNumberish,
    gasPrice: BigNumberish,
    tip: BigNumberish,
    unlockDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  should_always_be_able_connect_execution_manager(
    newExecutionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  speeding_up_a_request_multiple_times_should_fail(
    strategy: string,
    l1Calldata: BytesLike,
    gasLimit: BigNumberish,
    gasPrice: BigNumberish,
    tip: BigNumberish,
    gasDelta1: BigNumberish,
    gasDelta2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    requestExec_and_unlock_and_withdraw_tokens_should_work(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      unlockDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    should_always_be_able_connect_execution_manager(
      newExecutionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    speeding_up_a_request_multiple_times_should_fail(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      gasDelta1: BigNumberish,
      gasDelta2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    requestExec_and_unlock_and_withdraw_tokens_should_work(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      unlockDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    should_always_be_able_connect_execution_manager(
      newExecutionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    speeding_up_a_request_multiple_times_should_fail(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      gasDelta1: BigNumberish,
      gasDelta2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    requestExec_and_unlock_and_withdraw_tokens_should_work(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      unlockDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    should_always_be_able_connect_execution_manager(
      newExecutionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    speeding_up_a_request_multiple_times_should_fail(
      strategy: string,
      l1Calldata: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      tip: BigNumberish,
      gasDelta1: BigNumberish,
      gasDelta2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
