/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockStrategyInterface extends ethers.utils.Interface {
  functions: {
    "counter()": FunctionFragment;
    "thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(address,uint256)": FunctionFragment;
    "thisFunctionWillHardRevert()": FunctionFragment;
    "thisFunctionWillModifyState()": FunctionFragment;
    "thisFunctionWillNotRevert()": FunctionFragment;
    "thisFunctionWillRevert()": FunctionFragment;
    "thisFunctionWillTransferFromRelayer(address,uint256)": FunctionFragment;
    "thisFunctionWillTryToReenter()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillHardRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillModifyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillNotRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillTransferFromRelayer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "thisFunctionWillTryToReenter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillHardRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillModifyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillNotRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillTransferFromRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thisFunctionWillTryToReenter",
    data: BytesLike
  ): Result;

  events: {
    "ReentrancyFailed()": EventFragment;
    "StealRelayerTokensFailed()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReentrancyFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StealRelayerTokensFailed"): EventFragment;
}

export class MockStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockStrategyInterface;

  functions: {
    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    thisFunctionWillHardRevert(overrides?: CallOverrides): Promise<[void]>;

    thisFunctionWillModifyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    thisFunctionWillNotRevert(overrides?: CallOverrides): Promise<[void]>;

    thisFunctionWillRevert(overrides?: CallOverrides): Promise<[void]>;

    thisFunctionWillTransferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    thisFunctionWillTryToReenter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  thisFunctionWillHardRevert(overrides?: CallOverrides): Promise<void>;

  thisFunctionWillModifyState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  thisFunctionWillNotRevert(overrides?: CallOverrides): Promise<void>;

  thisFunctionWillRevert(overrides?: CallOverrides): Promise<void>;

  thisFunctionWillTransferFromRelayer(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  thisFunctionWillTryToReenter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    counter(overrides?: CallOverrides): Promise<BigNumber>;

    thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    thisFunctionWillHardRevert(overrides?: CallOverrides): Promise<void>;

    thisFunctionWillModifyState(overrides?: CallOverrides): Promise<void>;

    thisFunctionWillNotRevert(overrides?: CallOverrides): Promise<void>;

    thisFunctionWillRevert(overrides?: CallOverrides): Promise<void>;

    thisFunctionWillTransferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    thisFunctionWillTryToReenter(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ReentrancyFailed(): TypedEventFilter<[], {}>;

    StealRelayerTokensFailed(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    counter(overrides?: CallOverrides): Promise<BigNumber>;

    thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    thisFunctionWillHardRevert(overrides?: CallOverrides): Promise<BigNumber>;

    thisFunctionWillModifyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    thisFunctionWillNotRevert(overrides?: CallOverrides): Promise<BigNumber>;

    thisFunctionWillRevert(overrides?: CallOverrides): Promise<BigNumber>;

    thisFunctionWillTransferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    thisFunctionWillTryToReenter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    thisFunctionWillHardRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thisFunctionWillModifyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    thisFunctionWillNotRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thisFunctionWillRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thisFunctionWillTransferFromRelayer(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    thisFunctionWillTryToReenter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
