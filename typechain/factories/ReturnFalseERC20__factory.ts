/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReturnFalseERC20,
  ReturnFalseERC20Interface,
} from "../ReturnFalseERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060978061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806323b872dd14602d575b600080fd5b606d60048036036060811015604157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356081565b604080519115158252519081900360200190f35b6000939250505056fea164736f6c6343000706000a";

export class ReturnFalseERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReturnFalseERC20> {
    return super.deploy(overrides || {}) as Promise<ReturnFalseERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReturnFalseERC20 {
    return super.attach(address) as ReturnFalseERC20;
  }
  connect(signer: Signer): ReturnFalseERC20__factory {
    return super.connect(signer) as ReturnFalseERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReturnFalseERC20Interface {
    return new utils.Interface(_abi) as ReturnFalseERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnFalseERC20 {
    return new Contract(address, _abi, signerOrProvider) as ReturnFalseERC20;
  }
}
