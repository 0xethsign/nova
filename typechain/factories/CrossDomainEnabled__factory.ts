/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CrossDomainEnabled,
  CrossDomainEnabledInterface,
} from "../CrossDomainEnabled";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract iOVM_CrossDomainMessenger",
        name: "_CROSS_DOMAIN_MESSENGER",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CROSS_DOMAIN_MESSENGER",
    outputs: [
      {
        internalType: "contract iOVM_CrossDomainMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516100f13803806100f18339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b0316608d61006460003980605e5250608d6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806316be836c14602d575b600080fd5b6033605c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b7f00000000000000000000000000000000000000000000000000000000000000008156fea164736f6c6343000706000a";

export class CrossDomainEnabled__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _CROSS_DOMAIN_MESSENGER: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CrossDomainEnabled> {
    return super.deploy(
      _CROSS_DOMAIN_MESSENGER,
      overrides || {}
    ) as Promise<CrossDomainEnabled>;
  }
  getDeployTransaction(
    _CROSS_DOMAIN_MESSENGER: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_CROSS_DOMAIN_MESSENGER, overrides || {});
  }
  attach(address: string): CrossDomainEnabled {
    return super.attach(address) as CrossDomainEnabled;
  }
  connect(signer: Signer): CrossDomainEnabled__factory {
    return super.connect(signer) as CrossDomainEnabled__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossDomainEnabledInterface {
    return new utils.Interface(_abi) as CrossDomainEnabledInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossDomainEnabled {
    return new Contract(address, _abi, signerOrProvider) as CrossDomainEnabled;
  }
}
