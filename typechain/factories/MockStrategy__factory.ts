/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStrategy, MockStrategyInterface } from "../MockStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract L1_NovaExecutionManager",
        name: "_executionManager",
        type: "address",
      },
      {
        internalType: "enum L1_NovaExecutionManager.StrategyRiskLevel",
        name: "_riskLevel",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ReentrancyFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "StealRelayerTokensFailed",
    type: "event",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "thisFunctionWillEmulateAMaliciousExternalContractTryingToStealRelayerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "thisFunctionWillHardRevert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "thisFunctionWillModifyState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "thisFunctionWillNotRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "thisFunctionWillRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "thisFunctionWillTransferFromRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "thisFunctionWillTryToReenter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600160005534801561001557600080fd5b50604051610b58380380610b588339818101604052604081101561003857600080fd5b508051602090910151600081600281111561004f57fe5b146100bf5760405163148db7b560e01b81526001600160a01b0383169063148db7b59083906004018082600281111561008457fe5b8152602001915050600060405180830381600087803b1580156100a657600080fd5b505af11580156100ba573d6000803e3d6000fd5b505050505b6001600160601b0319606083901b1660a05260405182906100df90610125565b6001600160a01b03909116815260405190819003602001906000f08015801561010c573d6000803e3d6000fd5b5060601b6001600160601b031916608052506101329050565b610359806107ff83390190565b60805160601c60a05160601c61069a61016560003980610145528061029e52806103ff5250806104ac525061069a6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637261a0241161005b5780637261a024146100c15780637ec662fb146100c9578063976e9fc314610102578063a6d22b421461013b57610088565b80630db124701461008d5780634d339b8f1461009757806355136eb41461009f57806361bc221a146100a7575b600080fd5b610095610143565b005b6100956101c3565b61009561022a565b6100af6103f7565b60408051918252519081900360200190f35b6100956103f5565b610095600480360360408110156100df57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103fd565b6100956004803603604081101561011857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104aa565b61009561059a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b7daba366040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a957600080fd5b505afa1580156101bd573d6000803e3d6000fd5b50505050565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f742061206861726420726576657274210000000000000000000000000000604482015290519081900360640190fd5b604080517f262d18f80000000000000000000000000000000000000000000000000000000081526000600482018190526024820181905260648201819052683635c9adc5de9fffff608483015260a0604483015260a48201819052915173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263262d18f89260c4808201939182900301818387803b1580156102e157600080fd5b505af19250505080156102f2575060015b6103f5576102fe6105ab565b8061030957506103eb565b7e711abff3c37e7c30f3e913ce7850c25aa3cc8a57fd1991769a71b2483c2333816040516020018082805190602001908083835b6020831061037a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161033d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156103e5576040517fe7845562ae9b7d11c87f4dc6a2ef0ff4d398fc954bb32c71d7c96ca4f34ae5bc90600090a15b506103f5565b3d6000803e3d6000fd5b565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633996e60a83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561048e57600080fd5b505af11580156104a2573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632859c17083836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561053b57600080fd5b505af115801561054f573d6000803e3d6000fd5b505050506040513d602081101561056557600080fd5b505115610596576040517fb598da545be582b79b3ce091463b8f4fb61dd8c05fd6448421b635ccc140507e90600090a15b5050565b600080546001019055565b60e01c90565b600060443d10156105bb5761068a565b600481823e6308c379a06105cf82516105a5565b146105d95761068a565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715610627575050505061068a565b82840192508251915080821115610641575050505061068a565b503d830160208284010111156106595750505061068a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016020016040529150505b9056fea164736f6c6343000706000a60a060405234801561001057600080fd5b506040516103593803806103598339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166102f361006660003980608152506102f36000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632859c17014610030575b600080fd5b6100696004803603604081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561007d565b604080519115158252519081900360200190f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633996e60a84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561011057600080fd5b505af1925050508015610121575060015b6101f85761012d610204565b8061013857506101ee565b7f0da2cef0baa299da43eb01d5677caedf73b609d06e98f70950db32c90f012a32816040516020018082805190602001908083835b602083106101aa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161016d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120149150506101f8565b3d6000803e3d6000fd5b92915050565b60e01c90565b600060443d1015610214576102e3565b600481823e6308c379a061022882516101fe565b14610232576102e3565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff816024840111818411171561028057505050506102e3565b8284019250825191508082111561029a57505050506102e3565b503d830160208284010111156102b2575050506102e3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016020016040529150505b9056fea164736f6c6343000706000a";

export class MockStrategy__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _executionManager: string,
    _riskLevel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStrategy> {
    return super.deploy(
      _executionManager,
      _riskLevel,
      overrides || {}
    ) as Promise<MockStrategy>;
  }
  getDeployTransaction(
    _executionManager: string,
    _riskLevel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _executionManager,
      _riskLevel,
      overrides || {}
    );
  }
  attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  connect(signer: Signer): MockStrategy__factory {
    return super.connect(signer) as MockStrategy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStrategyInterface {
    return new utils.Interface(_abi) as MockStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}
